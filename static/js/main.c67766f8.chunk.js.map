{"version":3,"sources":["Message.js","MessageList.js","SendMessageForm.js","NewRoomForm.js","RoomList.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","src_Message","key","senderId","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","type","placeholder","onChange","disabled","NewRoomForm","roomName","createRoom","required","RoomList","shouldScrollBottom","orderedRooms","rooms","sort","b","id","room","active","onClick","subscribeToRoom","name","App","joinableRooms","joinedRooms","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","error","console","log","_this3","hooks","onMessage","concat","toConsumableArray","_this4","getJoinableRooms","_this5","err","src_RoomList","src_MessageList","src_SendMessageForm","src_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c67766f8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Message(props) {\n    return (\n        <div className=\"message\">\n            <div className=\"message-username\">\n                {props.username}\n            </div> \n            <div className=\"message-text\">\n                {props.text}\n            </div>\n        </div>\n    )\n}\n\nexport default Message;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Message from './Message';\n\n\nclass MessageList extends Component {\n\n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\n    }\n\n    componentDidUpdate() {\n        if(this.shouldScrollToBottom) {\n            const node = ReactDOM.findDOMNode(this);\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n    render() {\n        if(!this.props.roomId) {\n            return (\n                <div className=\"message-list\">\n                    <div className=\"join-room\">\n                        &larr; Join a room\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"message-list\">\n                {this.props.messages.map((message, index) => {\n                    return (\n                        <Message \n                            key={index} \n                            username={message.senderId}\n                            text={message.text} />\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SendMessageForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        /* send message */\n        this.props.sendMessage(this.state.message)\n        this.setState({message: ''})\n    }\n\n    render() {\n        return (\n            <form \n                onSubmit={this.handleSubmit}\n                className=\"send-message-form\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Type your message and hit ENTER\"\n                    value={this.state.message}\n                    onChange={this.handleChange} \n                    disabled={this.props.disabled} />\n            </form>\n        )\n    }\n}\n\nexport default SendMessageForm;","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({roomName: e.target.value})\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.createRoom(this.state.roomName);\n        this.setState({roomName: ''});\n    }\n    render() {\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input \n                        value={this.state.roomName}\n                        onChange={this.handleChange}\n                        placeholder=\"Create new room\"\n                        type='text'\n                        required\n                    />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default NewRoomForm;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass RoomList extends Component {\n\n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        this.shouldScrollBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\n    }\n\n    componentDidUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        if(this.shouldScrollBottom) {\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    render() {\n        const orderedRooms = this.props.rooms.sort((a,b) => a.id - b.id);\n        return (\n            <div className=\"rooms-list\">\n                <ul>\n                    <h3>Your rooms:</h3>\n                    {orderedRooms.map((room, index) => {\n                        const active = this.props.roomId === room.id ? \"active\" : \"\";\n                        return (\n                            <li \n                                key={room.id}\n                                className={\"room \" + active} >\n                                <button \n                                    className=\"btn btn-room\"\n                                    onClick={() => this.props.subscribeToRoom(room.id)}>\n                                    #{room.name}\n                                </button>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default RoomList;","import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\n\nimport './App.css';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport NewRoomForm from './NewRoomForm';\nimport RoomList from './RoomList';\n\nimport {tokenUrl, instanceLocator} from './config';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state =  {\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      roomId: null,\n    }\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n\n  componentDidMount() {\n    let chatManager = new Chatkit.ChatManager({\n      instanceLocator: instanceLocator,\n      userId: 'wikkie',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    })\n\n    chatManager.connect()\n      .then(currentUser => {\n        this.currentUser = currentUser;\n\n        this.getRooms();\n      })\n      .catch(error => {\n        console.log('Error on connecting ...' + error);\n      })\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({messages: []})\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages:[...this.state.messages, message]})\n        }\n      }\n    })\n    .then(room => {\n      this.setState({roomId: room.id})\n      this.getRooms();\n    })\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms()\n          .then(joinableRooms => {\n            this.setState({\n              joinableRooms:joinableRooms,\n              joinedRooms: this.currentUser.rooms\n            })\n          })\n          .catch(error => {\n            console.log('Error on joinable rooms ...' + error);\n          })\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(roomName) {\n    this.currentUser.createRoom({\n      name: roomName\n    })\n    .then(room => {\n      this.subscribeToRoom(room.id);\n    })\n    .catch(err => { console.log(`Error occurred ${err}`)})\n  }\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <RoomList \n          roomId={this.state.roomId}\n          subscribeToRoom={this.subscribeToRoom}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}/>\n        <MessageList\n          roomId={this.state.roomId} \n          messages={this.state.messages} />\n        <SendMessageForm\n          disabled={!this.state.roomId} \n          sendMessage={this.sendMessage} />\n        <NewRoomForm createRoom={this.createRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const instanceLocator = \"v1:us1:c413686e-547e-4a7b-ab74-f2eb3a886351\"\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/c413686e-547e-4a7b-ab74-f2eb3a886351/token\";\nexport {tokenUrl, instanceLocator }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}